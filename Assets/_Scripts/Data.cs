using System.Collections.Generic;
using UnityEngine;

namespace _Scripts
{
    public static class Data
    {
        public static int Score { get; set; }
        public static int MaxValue { get; set; }
        public static int CurrentTheme { get; set; }

        #region Colors

        private static Color32[][] Colors { get; } =
        {
            new[]
            {
                new Color32(38, 38, 38, 255),
                new Color32(160, 160, 160, 255),
                new Color32(100, 204, 235, 255),
                new Color32(160, 99, 219, 255),
                new Color32(57, 204, 143, 255),
                new Color32(255, 127, 30, 255),
                new Color32(80, 124, 137, 255),
                new Color32(255, 65, 129, 255),
                new Color32(114, 137, 217, 255),
                new Color32(76, 176, 80, 255),
                new Color32(255, 86, 71, 255),
                new Color32(255, 204, 0, 255),
                new Color32(0, 151, 136, 255),
                new Color32(60, 90, 154, 255),
                new Color32(254, 87, 34, 255),
            },
            new[]
            {
                new Color32(38, 38, 38, 255),
                new Color32(160, 160, 160, 255),
                new Color32(100, 204, 235, 255),
                new Color32(160, 99, 219, 255),
                new Color32(57, 204, 143, 255),
                new Color32(255, 127, 30, 255),
                new Color32(80, 124, 137, 255),
                new Color32(255, 65, 129, 255),
                new Color32(114, 137, 217, 255),
                new Color32(76, 176, 80, 255),
                new Color32(255, 86, 71, 255),
                new Color32(255, 204, 0, 255),
                new Color32(0, 151, 136, 255),
                new Color32(60, 90, 154, 255),
                new Color32(254, 87, 34, 255),
            },
            new[]
            {
                new Color32(61, 58, 51, 255),
                new Color32(238, 228, 218, 255),
                new Color32(237, 224, 200, 255),
                new Color32(242, 177, 121, 255),
                new Color32(246, 124, 95, 255),
                new Color32(246, 94, 59, 255),
                new Color32(237, 207, 114, 255),
                new Color32(237, 204, 97, 255),
                new Color32(237, 200, 80, 255),
                new Color32(237, 197, 63, 255),
                new Color32(237, 194, 46, 255)
            },
            new[]
            {
                new Color32(0, 0, 0, 255),
                new Color32(160, 160, 160, 255),
                new Color32(140, 140, 140, 255),
                new Color32(120, 120, 120, 255),
                new Color32(100, 100, 100, 255),
                new Color32(80, 80, 80, 255),
                new Color32(60, 60, 60, 255),
                new Color32(40, 40, 40, 255),
                new Color32(30, 30, 30, 255),
                new Color32(20, 20, 20, 255),
                new Color32(10, 10, 10, 255)
            },
            new[]
            {
                new Color32(255, 255, 255, 255),
                new Color32(95, 95, 95, 255),
                new Color32(115, 115, 115, 255),
                new Color32(135, 135, 135, 255),
                new Color32(155, 155, 155, 255),
                new Color32(175, 175, 175, 255),
                new Color32(195, 195, 195, 255),
                new Color32(215, 215, 215, 255),
                new Color32(225, 225, 225, 255),
                new Color32(235, 235, 235, 255),
                new Color32(245, 245, 245, 255),
                new Color32(255, 255, 255, 255)
            }
        };

        public static Color32 GetColorByValue(int value)
        {
            int i = 0;
            for (; value != 2; value /= 2, i++)
            {
            }

            try
            {
                return Colors[CurrentTheme][i + 1];
            }
            catch
            {
                return Colors[CurrentTheme][0];
            }
        }

        public static Color32[,] UIColors { get; } =
        {
            {
                new Color32(38, 38, 38, 255),
                new Color32(104, 104, 104, 255),
                new Color32(255, 255, 255, 255),
                new Color32(55, 55, 55, 255),
                new Color32(255, 255, 255, 255)
            },

            {
                new Color32(255, 255, 255, 255),
                new Color32(197, 197, 197, 255),
                new Color32(127, 127, 127, 255),
                new Color32(225, 225, 225, 255),
                new Color32(255, 255, 255, 255)
            },

            {
                new Color32(251, 248, 239, 255),
                new Color32(189, 176, 160, 255),
                new Color32(250, 245, 240, 255),
                new Color32(164, 147, 129, 255),
                new Color32(249, 246, 241, 255)
            },

            {
                new Color32(255, 255, 255, 255),
                new Color32(197, 197, 197, 255),
                new Color32(127, 127, 127, 255),
                new Color32(225, 225, 225, 255),
                new Color32(255, 255, 255, 255)
            },

            {
                new Color32(0, 0, 0, 255),
                new Color32(58, 58, 58, 255),
                new Color32(128, 128, 128, 255),
                new Color32(20, 20, 20, 255),
                new Color32(0, 0, 0, 255)
            }
        };

        #endregion

        #region Layouts

        public static Dictionary<int, float> CellSizes { get; } = new Dictionary<int, float>
        {
            [3] = 302.0979f,
            [4] = 225f,
            [5] = 179.2531f,
            [6] = 148.9655f,
            [7] = 127.4336f,
            [8] = 111.3402f
        };

        public static Dictionary<int, int> CellTextSizes { get; } = new Dictionary<int, int>
        {
            [3] = 100,
            [4] = 80,
            [5] = 60,
            [6] = 50,
            [7] = 45,
            [8] = 42
        };

        public static float[,,] CurrentLayout { get; set; }

        private static float[,,] layout_3 { get; } =
        {
            {{-328.951f, -328.951f}, {-328.951f, 0f}, {-328.951f, 328.951f}},
            {{0f, -328.951f}, {0f, 0f}, {0f, 328.951f}},
            {{328.951f, -328.951f}, {328.951f, 0f}, {328.951f, 328.951f}}
        };

        private static float[,,] layout_4 { get; } =
        {
            {{-367.5f, -367.5f}, {-367.5f, -122.5f}, {-367.5f, 122.5f}, {-367.5f, 367.5f}},
            {{-122.5f, -367.5f}, {-122.5f, -122.5f}, {-122.5f, 122.5f}, {-122.5f, 367.5f}},
            {{122.5f, -367.5f}, {122.5f, -122.5f}, {122.5f, 122.5f}, {122.5f, 367.5f}},
            {{367.5f, -367.5f}, {367.5f, -122.5f}, {367.5f, 122.5f}, {367.5f, 367.5f}}
        };

        private static float[,,] layout_5 { get; } =
        {
            {
                {-390.3734f, -390.3734f}, {-390.3734f, -195.1867f}, {-390.3734f, 0f}, {-390.3734f, 195.1867f},
                {-390.3734f, 390.3734f}
            },
            {
                {-195.1867f, -390.3734f}, {-195.1867f, -195.1867f}, {-195.1867f, 0f}, {-195.1867f, 195.1867f},
                {-195.1867f, 390.3734f}
            },
            {{0f, -390.3734f}, {0f, -195.1867f}, {0f, 0f}, {0, 195.1867f}, {0f, 390.3734f}},
            {
                {195.1867f, -390.3734f}, {195.1867f, -195.1867f}, {195.1867f, 0f}, {195.1867f, 195.1867f},
                {195.1867f, 390.3734f}
            },
            {
                {390.3734f, -390.3734f}, {390.3734f, -195.1867f}, {390.3734f, 0f}, {390.3734f, 195.1867f},
                {390.3734f, 390.3734f}
            }
        };

        private static float[,,] layout_6 { get; } =
        {
            {
                {-405.517f, -405.517f}, {-405.517f, -243.3102f}, {-405.517f, -81.1034f}, {-405.517f, 81.1034f},
                {-405.517f, 243.3102f},
                {-405.517f, 405.517f}
            },
            {
                {-243.3102f, -405.517f}, {-243.3102f, -243.3102f}, {-243.3102f, -81.1034f}, {-243.3102f, 81.1034f},
                {-243.3102f, 243.3102f},
                {-243.3102f, 405.517f}
            },
            {
                {-81.1034f, -405.517f}, {-81.1034f, -243.3102f}, {-81.1034f, -81.1034f}, {-81.1034f, 81.1034f},
                {-81.1034f, 243.3102f},
                {-81.1034f, 405.517f}
            },
            {
                {81.1034f, -405.517f}, {81.1034f, -243.3102f}, {81.1034f, -81.1034f}, {81.1034f, 81.1034f},
                {81.1034f, 243.3102f},
                {81.1034f, 405.517f}
            },
            {
                {243.3102f, -405.517f}, {243.3102f, -243.3102f}, {243.3102f, -81.1034f}, {243.3102f, 81.1034f},
                {243.3102f, 243.3102f}, {243.3102f, 405.517f}
            },
            {
                {405.517f, -405.517f}, {405.517f, -243.3102f}, {405.517f, -81.1034f}, {405.517f, 81.1034f},
                {405.517f, 243.3102f},
                {405.517f, 405.517f}
            }
        };

        private static float[,,] layout_7 { get; } =
        {
            {
                {-416.2833f, -416.2833f}, {-416.2833f, -277.5222f}, {-416.2833f, -138.7611f}, {-416.2833f, 0f},
                {-416.2833f, 138.7611f},
                {-416.2833f, 277.5222f}, {-416.2833f, 416.2833f}
            },
            {
                {-277.5222f, -416.2833f}, {-277.5222f, -277.5222f}, {-277.5222f, -138.7611f}, {-277.5222f, 0f},
                {-277.5222f, 138.7611f},
                {-277.5222f, 277.5222f}, {-277.5222f, 416.2833f}
            },
            {
                {-138.7611f, -416.2833f}, {-138.7611f, -277.5222f}, {-138.7611f, -138.7611f}, {-138.7611f, 0f},
                {-138.7611f, 138.7611f},
                {-138.7611f, 277.5222f}, {-138.7611f, 416.2833f}
            },
            {
                {0f, -416.2833f}, {0f, -277.5222f}, {0f, -138.7611f}, {0f, 0f}, {0f, 138.7611f}, {0f, 277.5222f},
                {0f, 416.2833f}
            },
            {
                {138.7611f, -416.2833f}, {138.7611f, -277.5222f}, {138.7611f, -138.7611f}, {138.7611f, 0f},
                {138.7611f, 138.7611f},
                {138.7611f, 277.5222f}, {138.7611f, 416.2833f}
            },
            {
                {277.5222f, -416.2833f}, {277.5222f, -277.5222f}, {277.5222f, -138.7611f}, {277.5222f, 0f},
                {277.5222f, 138.7611f},
                {277.5222f, 277.5222f}, {277.5222f, 416.2833f}
            },
            {
                {416.2833f, -416.2833f}, {416.2833f, -277.5222f}, {416.2833f, -138.7611f}, {416.2833f, 0f},
                {416.2833f, 138.7611f},
                {416.2833f, 277.5222f}, {416.2833f, 416.2833f}
            }
        };

        private static float[,,] layout_8 { get; } =
        {
            {
                {-424.3302f, -424.3302f}, {-424.3302f, -303.0938f}, {-424.3302f, -181.8558f}, {-424.3302f, -60.6186f},
                {-424.3302f, 60.6186f}, {-424.3302f, 181.8558f}, {-424.3302f, 303.0938f}, {-424.3302f, 424.3302f}
            },
            {
                {-303.0938f, -424.3302f}, {-303.0938f, -303.0938f}, {-303.0938f, -181.8558f}, {-303.0938f, -60.6186f},
                {-303.0938f, 60.6186f}, {-303.0938f, 181.8558f}, {-303.0938f, 303.0938f}, {-303.0938f, 424.3302f}
            },
            {
                {-181.8558f, -424.3302f}, {-181.8558f, -303.0938f}, {-181.8558f, -181.8558f}, {-181.8558f, -60.6186f},
                {-181.8558f, 60.6186f}, {-181.8558f, 181.8558f}, {-181.8558f, 303.0938f}, {-181.8558f, 424.3302f}
            },
            {
                {-60.6186f, -424.3302f}, {-60.6186f, -303.0938f}, {-60.6186f, -181.8558f}, {-60.6186f, -60.6186f},
                {-60.6186f, 60.6186f}, {-60.6186f, 181.8558f}, {-60.6186f, 303.0938f}, {-60.6186f, 424.3302f}
            },
            {
                {60.6186f, -424.3302f}, {60.6186f, -303.0938f}, {60.6186f, -181.8558f}, {60.6186f, -60.6186f},
                {60.6186f, 60.6186f},
                {60.6186f, 181.8558f}, {60.6186f, 303.0938f}, {60.6186f, 424.3302f}
            },
            {
                {181.8558f, -424.3302f}, {181.8558f, -303.0938f}, {181.8558f, -181.8558f}, {181.8558f, -60.6186f},
                {181.8558f, 60.6186f},
                {181.8558f, 181.8558f}, {181.8558f, 303.0938f}, {181.8558f, 424.3302f}
            },
            {
                {303.0938f, -424.3302f}, {303.0938f, -303.0938f}, {303.0938f, -181.8558f}, {303.0938f, -60.6186f},
                {303.0938f, 60.6186f},
                {303.0938f, 181.8558f}, {303.0938f, 303.0938f}, {303.0938f, 424.3302f}
            },
            {
                {424.3302f, -424.3302f}, {424.3302f, -303.0938f}, {424.3302f, -181.8558f}, {424.3302f, -60.6186f},
                {424.3302f, 60.6186f},
                {424.3302f, 181.8558f}, {424.3302f, 303.0938f}, {424.3302f, 424.3302f}
            }
        };

        public static Dictionary<int, float[,,]> layouts { get; } = new Dictionary<int, float[,,]>
        {
            [3] = layout_3,
            [4] = layout_4,
            [5] = layout_5,
            [6] = layout_6,
            [7] = layout_7,
            [8] = layout_8
        };

        public static int[,,] layout_simple { get; } =
        {
            {{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}},
            {{1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}},
            {{2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}},
            {{3, 0}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {3, 5}, {3, 6}, {3, 7}},
            {{4, 0}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {4, 5}, {4, 6}, {4, 7}},
            {{5, 0}, {5, 1}, {5, 2}, {5, 3}, {5, 4}, {5, 5}, {5, 6}, {5, 7}},
            {{6, 0}, {6, 1}, {6, 2}, {6, 3}, {6, 4}, {6, 5}, {6, 6}, {6, 7}},
            {{7, 0}, {7, 1}, {7, 2}, {7, 3}, {7, 4}, {7, 5}, {7, 6}, {7, 7}}
        };

        #endregion
    }
}